import React, { useState, useEffect } from 'react';
import { View, Text, Button, TextInput, StyleSheet, TouchableOpacity, ScrollView, Alert } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Notifications from 'expo-notifications';

// Random acts of kindness array
const kindnessActs = [
  'Compliment someone today.',
  'Donate to a charity.',
  'Send a thank-you note.',
  'Smile at a stranger.',
  'Help a neighbor with groceries.',
  'Give a hug to a loved one.',
  'Buy a coffee for someone in line.',
];

// Home Screen
function HomeScreen({ navigation }) {
  const [act, setAct] = useState('');
  const [count, setCount] = useState(0);
  const [reminderSet, setReminderSet] = useState(false);

  // Load saved count
  useEffect(() => {
    const loadCount = async () => {
      const savedCount = await AsyncStorage.getItem('actCount');
      if (savedCount) setCount(parseInt(savedCount));
    };
    loadCount();
  }, []);

  // Function to get a random kindness act
  const getRandomAct = () => {
    const randomIndex = Math.floor(Math.random() * kindnessActs.length);
    setAct(kindnessActs[randomIndex]);
  };

  // Function to log the act and update the counter
  const logAct = async () => {
    if (act) {
      setCount(count + 1);
      await AsyncStorage.setItem('actCount', (count + 1).toString());
      Alert.alert('Well done!', 'Your act of kindness has been logged!');
    } else {
      Alert.alert('Oops', 'Please get a random act first.');
    }
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Random Acts of Kindness</Text>

      <View style={styles.card}>
        <Button title="Get a Random Act of Kindness" onPress={getRandomAct} />
        {act ? <Text style={styles.act}>{act}</Text> : null}
      </View>

      <View style={styles.card}>
        <Button title="Log This Act" onPress={logAct} />
        <Text style={styles.counter}>Acts Completed: {count}</Text>
      </View>

      <View style={styles.card}>
        <TouchableOpacity
          onPress={() => navigation.navigate('Journal')}
          style={styles.reminderButton}
        >
          <Text style={styles.reminderText}>Go to Journal</Text>
        </TouchableOpacity>
        <TouchableOpacity
          onPress={() => navigation.navigate('Progress')}
          style={styles.reminderButton}
        >
          <Text style={styles.reminderText}>View Progress</Text>
        </TouchableOpacity>
      </View>
    </ScrollView>
  );
}

// Journal Screen
function JournalScreen({ navigation }) {
  const [journal, setJournal] = useState('');

  useEffect(() => {
    const loadJournal = async () => {
      const savedJournal = await AsyncStorage.getItem('journal');
      if (savedJournal) setJournal(savedJournal);
    };
    loadJournal();
  }, []);

  const saveJournal = async () => {
    await AsyncStorage.setItem('journal', journal);
    Alert.alert('Saved', 'Your journal entry has been saved!');
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Journal</Text>

      <TextInput
        style={styles.input}
        placeholder="Write about your experience..."
        value={journal}
        onChangeText={setJournal}
        multiline
      />

      <View style={styles.card}>
        <Button title="Save Journal" onPress={saveJournal} />
      </View>

      <TouchableOpacity
        onPress={() => navigation.goBack()}
        style={styles.reminderButton}
      >
        <Text style={styles.reminderText}>Back to Home</Text>
      </TouchableOpacity>
    </ScrollView>
  );
}

// Progress Screen
function ProgressScreen() {
  const [count, setCount] = useState(0);
  const [journal, setJournal] = useState('');

  useEffect(() => {
    const loadData = async () => {
      const savedCount = await AsyncStorage.getItem('actCount');
      const savedJournal = await AsyncStorage.getItem('journal');
      if (savedCount) setCount(parseInt(savedCount));
      if (savedJournal) setJournal(savedJournal);
    };
    loadData();
  }, []);

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Progress</Text>

      <View style={styles.card}>
        <Text style={styles.counter}>Total Acts Completed: {count}</Text>
        <Text style={styles.title}>Latest Journal Entry:</Text>
        <Text>{journal ? journal : 'No journal entry yet'}</Text>
      </View>
    </ScrollView>
  );
}

// Stack Navigator setup
const Stack = createStackNavigator();

export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Home">
        <Stack.Screen name="Home" component={HomeScreen} />
        <Stack.Screen name="Journal" component={JournalScreen} />
        <Stack.Screen name="Progress" component={ProgressScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
    padding: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 20,
  },
  card: {
    backgroundColor: '#ffffff',
    borderRadius: 10,
    padding: 20,
    marginBottom: 15,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowRadius: 5,
    shadowOffset: { width: 0, height: 3 },
  },
  act: {
    fontSize: 16,
    fontStyle: 'italic',
    color: '#555',
    marginTop: 10,
  },
  counter: {
    fontSize: 16,
    fontWeight: 'bold',
    marginTop: 10,
  },
  input: {
    height: 100,
    borderColor: '#ccc',
    borderWidth: 1,
    borderRadius: 5,
    padding: 10,
    marginTop: 10,
    textAlignVertical: 'top',
  },
  reminderButton: {
    backgroundColor: '#5cb85c',
    padding: 15,
    borderRadius: 5,
    alignItems: 'center',
    marginTop: 10,
  },
  reminderText: {
    color: 'white',
    fontWeight: 'bold',
  },
});
